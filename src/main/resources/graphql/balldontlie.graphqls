type Team {
    id: ID!,
    abbreviation: String!,
    city: String!,
    conference: String!,
    division: String!,
    fullName: String!,
    name: String!
}

type Player {
    id: ID!,
    firstName: String!,
    lastName: String!,
    position: String!,
    heightFeet: Int!,
    heightInches: Int!,
    weight: Weight!
    team: Team!
}

type Game {
    id: ID!,
    date: String!,
    homeTeamScore: Int!,
    visitorTeamScore: Int!,
    season: Int!,
    period: Int!,
    status: String!,
    time: String!,
    postseason: Boolean!,
    homeTeam: Team!,
    visitorTeam: Team!
}

type Stats {
    id: ID!,
    player: Player!,
    team: Team!,
    game: Game!,
    minutes: String!,
    points: Int!,
    assists: Int!,
    rebounds: Int!,
    defensiveRebounds: Int!,
    offensiveRebounds: Int!,
    blocks: Int!,
    steals: Int!,
    turnovers: Int!,
    personalFouls: Int!,
    fieldGoalsAttempted: Int!,
    fieldGoalsMade: Int!,
    fieldGoalPercentage: Float!,
    threePointersAttempted: Int!,
    threePointersMade: Int!,
    threePointerPercentage: Float!,
    freeThrowsAttempted: Int!,
    freeThrowsMade: Int!,
    freeThrowPercentage: Float!
}

type Query {
    # Give -1 to get all teams.
    teams(count: Int): [Team]
    team(id: ID): Team

    # Give -1 to get all players.
    players(count: Int): [Player]
    player(id: ID): Player

    # Give -1 to get all games.
    games(count: Int): [Game]
    game(id: ID): Game

    # Give -1 to get all stats.
    allStats(count: Int): [Stats]
    stats(id: ID): Stats
}

scalar Weight
